/**
 *
 * $Id$
 */
package eu.piacere.doml.doml.concrete.validation;

import eu.piacere.doml.doml.concrete.AutoScalingGroup;
import eu.piacere.doml.doml.concrete.ComputingGroup;
import eu.piacere.doml.doml.concrete.ContainerImage;
import eu.piacere.doml.doml.concrete.ExecutionEnvironment;
import eu.piacere.doml.doml.concrete.FunctionAsAService;
import eu.piacere.doml.doml.concrete.GenericResource;
import eu.piacere.doml.doml.concrete.Network;
import eu.piacere.doml.doml.concrete.Storage;
import eu.piacere.doml.doml.concrete.VMImage;
import eu.piacere.doml.doml.concrete.VirtualMachine;

import org.eclipse.emf.common.util.EList;

/**
 * A sample validator interface for {@link eu.piacere.doml.doml.concrete.RuntimeProvider}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface RuntimeProviderValidator {
	boolean validate();

	boolean validateResources(EList<GenericResource> value);
	boolean validateVms(EList<VirtualMachine> value);
	boolean validateExecutionEnvironments(EList<ExecutionEnvironment> value);

	boolean validateVmImages(EList<VMImage> value);
	boolean validateContainerImages(EList<ContainerImage> value);
	boolean validateNetworks(EList<Network> value);
	boolean validateStorages(EList<Storage> value);
	boolean validateFaas(EList<FunctionAsAService> value);
	boolean validateAutoScalingGroups(EList<AutoScalingGroup> value);

	boolean validateGroup(EList<ComputingGroup> value);
}
